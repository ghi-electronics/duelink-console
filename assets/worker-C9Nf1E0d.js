!function(){"use strict";importScripts("../consumer-queue.min.js");const e=new TextDecoder,t=new TextEncoder;let n=!1,a=!1,s=!0,i=">",o="",r=null,c=!0,l=null,u=null,g=!0,d="",p=null;const w=new ConsumerQueue,f=[">","$","&"];async function m(){try{await async function(){c=!1,l&&(await u.cancel(),await l,l=null)}(),p&&await p.releaseLock(),u&&await u.releaseLock(),await r.close(),k("Port disconnected.")}catch(e){k("There was an error while disconnecting."),M(e?.message||"Unknown error.")}finally{a=!1,postMessage({event:"disconnected"}),postMessage({event:"version",value:null})}}async function h(){b("memoryRegions 2"),n=!0;const e=await x("mem()");postMessage({event:"memoryRegionsResult",result:e}),n=!1}function v(){return new Promise(async e=>{const t=[];let n;do{n=await w.tryPop(),n?(t.push(n),b("flushed - push line:",n)):b("flushed: No line")}while(n);t.length||(d=""),b("flushed",t),e(t)})}async function y(){const e=await x("version()");for(const t of e){if(b("line",t,(t.match(/\./g)||[]).length),-1!=t.indexOf("GHI Electronics DUELink v")){return t.split(":")[0].substring(24)}}}function b(){}function M(e){postMessage({event:"logError",message:e})}function k(e){postMessage({event:"logEvent",message:e})}function R(e=null){return e||(e=i),new Promise(async t=>{const n=[];let a;do{if(a=await w.pop().catch(()=>{t(n)}),!a)break;if(n.push(a),a.startsWith("!")){b("Error:",a);break}}while(a!==e);n.length>1?n.pop():n?.[0]===e&&n.shift(),t(n)})}function E(e){return new Promise(t=>setTimeout(t,e))}async function P(e){let n=t.encode(e),a=n.length,s=0;for(;a>0;){const e=n.subarray(s,s+Math.min(64,a));await p.write(e);const t=await w.tryPop();if(t)return t;s+=64,a-=e.length,await E(1)}return null}async function x(e,n=null,a="\n"){try{postMessage({event:"isTalking",value:!0}),await v(),p.write(t.encode(e+a)),">"!==e&&"$"!==e||(i=e),await E(50);const s=await R(n||i);return s}finally{postMessage({event:"isTalking",value:!1,lastCommand:e})}}addEventListener("message",$=>{switch(b(`---- on "message", do task: ${$.data.task} ----`),$.data.task){case"clearOutput":o="";break;case"connect":!async function(){b(`Port status ${a}`),[r]=await navigator.serial.getPorts();try{await r.open({baudRate:115200,dataBits:8,parity:"none",stopBits:1,flowControl:"none"})}catch(g){return postMessage({event:"ConnectFailed",message:g?.message,name:g.name,full:g}),void M(g?.message||"Unable to open port.")}if(r.addEventListener("disconnect",()=>{b("Port disconnected"),m()}),null==r?.writable)return void M("Port is not a writable.");if(null==r?.readable)return void M("Port is not a readable.");p=r.writable.getWriter(),u=r.readable.getReader(),void(l=async function(){let t,s=!0;for(c=!0;c;)try{const{value:i,done:r}=await u.read();b("Reading... Done?",r);const l=e.decode(i).replace(/\r/gm,"");if(a&&!f.includes(l.substring(-1,1))){if(o+=l,o.length>2e3)if(l.length<o.length){o=o.substring(l.length,o.length);const e=o.indexOf("\n");e>-1&&(o=o.substring(e+1,o.length)),s=!0}else o="",postMessage({event:"output",value:"Maximum output limit reached."}),s=!1;s&&!n?postMessage({event:"output",value:o}):n&&(o="")}if(d+=l,!d)continue;let g=d.indexOf("\n");for(g>-1?d.split("\n").forEach(e=>b("->",e)):b("->",d);g>-1;)t=d.substring(0,g),t&&(b("queued:",t),w.push(t)),d=d.substring(g+1),g=d.indexOf("\n");">"!==d&&"$"!==d&&"&"!==d||(b("queued:",d),w.push(d),d=""),r&&(c=!1),await E(2)}catch(g){postMessage({event:"logError",message:g?.message||"There were problems reading."});break}}()),await E(100),0!=await async function(){let e=4;for(;e>0;){await p.write(t.encode("")),b("wrote escape count: "+(4-e+1)),await E(100);let n=await v();if(b("escape result",n),n.length>=1){n=n.pop(),">"!==n&&"$"!==n||(i=n,b("mode set to",n));break}0===n.length&&await E(500),e--}if(b("synchronize : "+(4-e+1)),0===e)return await m(),0;result=await this.write(""),await E(500),result=await this.write("sel(1)"),s&&await async function(){if(!s)return;await x("echo(0)"),s=!1}();e=3;for(;e>0;){await E(100);const t=await y();if("string"==typeof t){b("version found",t),postMessage({event:"version",value:t});break}e--}return e}()?(a=!0,postMessage({event:"connected"})):postMessage({event:"ConnectFailed",message:"Synchronize failed. Reset the board, or Press F5 then try to click connect again.",name:"Device is busy"})}();break;case"disconnect":m();break;case"execute":!async function(e){if(await x(">"),(e=e.toLowerCase()).startsWith("mem")){const t=await x(e);postMessage({event:"memoryRegionsResult",result:t})}else await x(e);k(`Executed: &nbsp;<code>${e}</code>`)}($.data.line);break;case"list":!async function(e){const t=await x("list");postMessage({event:"writeResult",callbackId:e,result:t}),k("Listed program code.")}($.data.callbackId);break;case"listAll":!async function(){const e=await x("list all");postMessage({event:"listAllResult",result:e})}();break;case"memoryRegions":b("memoryRegions 1b"),h();break;case"newAll":!async function(){await x("new all"),postMessage({event:"erased"}),await h()}();break;case"play":!async function(){g=!1,postMessage({event:"playing"}),await x("run"),g||(g=!0,postMessage({event:"stopped"}))}();break;case"record":!async function(e){postMessage({event:"recording",percent:0}),await x("pgmbrst()","&"),e=e.replace(/\r/gm,"").replace(/\t/gm," ").split(/\n/);let t=0;for(let n of e)0===n.trim().length&&(n=" "),b("line",`"${n}"`),await P(n+"\n"),postMessage({event:"recording",percent:++t/e.length*100});postMessage({event:"recording",percent:100}),await P("\0"),await R(),postMessage({event:"recorded"}),k("Recorded "+e.length+" line(s) of code.")}($.data.lines);break;case"region":!async function(e){await x(`region(${e})`),postMessage({event:"regionSelected",index:e})}($.data.index);break;case"stop":!async function(){g=!0,w.cancelWait(new Error("Stop")),p.write(t.encode("")),postMessage({event:"stopped"})}();break;case"erase_all":!async function(){postMessage({event:"Erasing",percent:0}),await x("reset(1)"),await x("reset(1)"),postMessage({event:"Erased",percent:100}),k("Recorded "+lines.length+" line(s) of code.")}()}})}();
